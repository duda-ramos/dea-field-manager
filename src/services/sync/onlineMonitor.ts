import { syncStateManager } from './syncState';
import { processSyncQueue } from '@/services/storage/StorageManagerDexie';
import { fullSync } from './sync';
import { toast } from '@/hooks/use-toast';

class OnlineMonitor {
  private checkInterval: number | null = null;
  private isMonitoring = false;

  initialize() {
    if (this.isMonitoring) return;
    
    this.isMonitoring = true;
    
    // Listeners de eventos nativos
    window.addEventListener('online', this.handleOnline);
    window.addEventListener('offline', this.handleOffline);
    
    // VerificaÃ§Ã£o periÃ³dica (a cada 30 segundos)
    this.checkInterval = window.setInterval(() => {
      this.checkConnection();
    }, 30000);
    
    // VerificaÃ§Ã£o inicial
    this.checkConnection();
  }

  cleanup() {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
    }
    
    window.removeEventListener('online', this.handleOnline);
    window.removeEventListener('offline', this.handleOffline);
    this.isMonitoring = false;
  }

  private handleOnline = async () => {
    console.log('ğŸŸ¢ ConexÃ£o restaurada');
    
    syncStateManager.updateState({ 
      isOnline: true,
      status: 'idle' 
    });

    const pendingCount = syncStateManager.getState().pendingPush;
    
    if (pendingCount > 0) {
      toast({
        title: "ConexÃ£o Restaurada",
        description: `Sincronizando ${pendingCount} alteraÃ§Ã£o${pendingCount > 1 ? 'Ãµes' : ''} pendente${pendingCount > 1 ? 's' : ''}...`,
      });

      try {
        // Processar fila de sincronizaÃ§Ã£o
        await processSyncQueue();
        
        // Fazer sincronizaÃ§Ã£o completa
        await fullSync();
        
        toast({
          title: "SincronizaÃ§Ã£o ConcluÃ­da",
          description: "Todas as alteraÃ§Ãµes foram sincronizadas com sucesso!",
        });
      } catch (error) {
        console.error('Erro ao sincronizar apÃ³s reconexÃ£o:', error);
        toast({
          title: "Erro na SincronizaÃ§Ã£o",
          description: "Algumas alteraÃ§Ãµes nÃ£o puderam ser sincronizadas. Tentaremos novamente.",
          variant: "destructive"
        });
      }
    } else {
      toast({
        title: "Online",
        description: "ConexÃ£o com servidor restaurada",
      });
    }
  };

  private handleOffline = () => {
    console.log('ğŸ”´ ConexÃ£o perdida - trabalhando offline');
    
    syncStateManager.updateState({ 
      isOnline: false,
      status: 'idle' 
    });

    toast({
      title: "Sem ConexÃ£o",
      description: "Trabalhando offline. Suas alteraÃ§Ãµes serÃ£o sincronizadas quando a conexÃ£o for restaurada.",
      variant: "destructive"
    });
  };

  private async checkConnection() {
    const wasOnline = syncStateManager.getState().isOnline;
    const isCurrentlyOnline = navigator.onLine;

    // Se mudou de offline para online
    if (!wasOnline && isCurrentlyOnline) {
      await this.handleOnline();
    }
    // Se mudou de online para offline
    else if (wasOnline && !isCurrentlyOnline) {
      this.handleOffline();
    }
  }

  getPendingCount(): number {
    return syncStateManager.getState().pendingPush;
  }

  isOnline(): boolean {
    return navigator.onLine;
  }
}

export const onlineMonitor = new OnlineMonitor();
