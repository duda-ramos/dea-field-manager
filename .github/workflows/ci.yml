name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20.x]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm
          check-latest: true

      - name: Degraded mode check
        id: degraded
        run: |
          if [ "${{ secrets.DEGRADED_CI }}" = "true" ]; then
            echo "degraded=true" >> $GITHUB_OUTPUT
            echo "⚠️ CI está em modo degradado: instalação/build desativados."
          else
            echo "degraded=false" >> $GITHUB_OUTPUT
            echo "CI em modo normal."
          fi

      - name: Harden npm config
        if: steps.degraded.outputs.degraded == 'false'
        run: |
          echo "registry=https://registry.npmjs.org/" > .npmrc
          npm config set fetch-retries 5
          npm config set fetch-retry-maxtimeout 120000
          npm config set fetch-retry-mintimeout 20000
          npm config set prefer-online true
          npm cache clean --force
          node -v
          npm -v
          npm config list
        env:
          NODE_OPTIONS: --dns-result-order=ipv4first

      - name: Install deps (prefer npm ci, retry + fallback)
        if: steps.degraded.outputs.degraded == 'false'
        shell: bash
        env:
          NPM_CONFIG_PRODUCTION: "false"
        run: |
          set -e
          attempt() {
            if [ -f package-lock.json ]; then
              npm ci --no-audit --no-fund
            else
              npm i --no-audit --no-fund --include=dev
            fi
          }
          fallback_registry() {
            echo "⚠️ switching registry to npmmirror fallback..."
            npm config set registry https://registry.npmmirror.com
            npm cache clean --force || true
          }
          for i in 1 2 3; do
            if attempt; then
              echo "Dependencies installed on attempt $i ($(npm config get registry))"; break
            fi
            echo "install attempt $i failed; retry in $((i*10))s"
            npm cache clean --force || true
            sleep $((i*10))
            if [ "$i" -eq 3 ]; then
              fallback_registry
            fi
          done

      - name: Diagnose install
        if: steps.degraded.outputs.degraded == 'false'
        shell: bash
        run: |
          echo "----- NODE / NPM VERSIONS -----"
          node -v
          npm -v
          echo "----- CURRENT REGISTRY -----"
          npm config get registry
          echo "----- PACKAGE.JSON KEYS -----"
          node -e "const p=require('./package.json'); console.log('has devDeps.vite?', !!(p.devDependencies && p.devDependencies.vite)); console.log(Object.keys(p.dependencies||{}).length+' deps, '+Object.keys(p.devDependencies||{}).length+' devDeps')"
          echo "----- NODE_MODULES CHECK -----"
          if [ ! -d node_modules ] || [ ! \"$(ls -A node_modules 2>/dev/null)\" ]; then
            echo '❌ node_modules está vazio/ausente'
            echo 'Forçando reinstalação com mirror e --force...'
            npm config set registry https://registry.npmmirror.com
            npm cache clean --force || true
            npm i --no-audit --no-fund --include=dev --legacy-peer-deps --force
          else
            echo '✅ node_modules presente'
          fi
          echo "----- TOP LEVEL LIST -----"
          npm ls --depth=0 || true

      - name: Ensure Vite present (retry if missing)
        if: steps.degraded.outputs.degraded == 'false'
        shell: bash
        env:
          NPM_CONFIG_PRODUCTION: "false"
        run: |
          if [ ! -f node_modules/vite/bin/vite.js ]; then
            echo "Vite binary not found. Installing vite as devDependency (retry with force)..."
            for k in 1 2 3; do
              if npm i -D vite@^5 --no-audit --no-fund --include=dev --legacy-peer-deps --force; then
                break
              fi
              echo "vite install attempt $k failed; retrying..."
              npm cache clean --force || true
              sleep $((k*10))
              if [ "$k" -eq 3 ]; then
                echo "Cannot install vite locally; will try npx at build time."
              fi
            done
          fi
          if [ -f node_modules/vite/bin/vite.js ]; then
            echo "✅ vite bin OK"
          else
            echo "⚠️ vite local ausente; build tentará npx como último recurso"
          fi

      - name: Typecheck
        if: steps.degraded.outputs.degraded == 'false'
        run: npx tsc --noEmit

      - name: Lint (non-blocking)
        if: steps.degraded.outputs.degraded == 'false'
        continue-on-error: true
        run: npm run lint

      - name: Build
        if: steps.degraded.outputs.degraded == 'false'
        shell: bash
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL || 'dummy-url' }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY || 'dummy-key' }}
        run: |
          if [ -f node_modules/vite/bin/vite.js ]; then
            node node_modules/vite/bin/vite.js build
          else
            echo "⚠️ vite local não encontrado; tentando npx com registry atual..."
            npx --yes vite@^5 build
          fi

      - name: Degraded success marker
        if: steps.degraded.outputs.degraded == 'true'
        run: |
          echo "✅ CI aprovado em modo degradado (sem instalar/buildar por falta de rede)."
          echo "Quando a rede voltar, desative o secret DEGRADED_CI para restaurar o fluxo completo."

  e2e-smoke:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: npm
          check-latest: true

      - name: Degraded mode check
        id: degraded
        run: |
          if [ "${{ secrets.DEGRADED_CI }}" = "true" ]; then
            echo "degraded=true" >> $GITHUB_OUTPUT
            echo "⚠️ CI está em modo degradado: instalação/build desativados."
          else
            echo "degraded=false" >> $GITHUB_OUTPUT
            echo "CI em modo normal."
          fi

      - name: Harden npm config
        if: steps.degraded.outputs.degraded == 'false'
        run: |
          echo "registry=https://registry.npmjs.org/" > .npmrc
          npm config set fetch-retries 5
          npm config set fetch-retry-maxtimeout 120000
          npm config set fetch-retry-mintimeout 20000
          npm config set prefer-online true
          npm cache clean --force
          node -v
          npm -v
          npm config list
        env:
          NODE_OPTIONS: --dns-result-order=ipv4first

      - name: Install deps (prefer npm ci, retry + fallback)
        if: steps.degraded.outputs.degraded == 'false'
        shell: bash
        env:
          NPM_CONFIG_PRODUCTION: "false"
        run: |
          set -e
          attempt() {
            if [ -f package-lock.json ]; then
              npm ci --no-audit --no-fund
            else
              npm i --no-audit --no-fund --include=dev
            fi
          }
          fallback_registry() {
            echo "⚠️ switching registry to npmmirror fallback..."
            npm config set registry https://registry.npmmirror.com
            npm cache clean --force || true
          }
          for i in 1 2 3; do
            if attempt; then
              echo "Dependencies installed on attempt $i ($(npm config get registry))"; break
            fi
            echo "install attempt $i failed; retry in $((i*10))s"
            npm cache clean --force || true
            sleep $((i*10))
            if [ "$i" -eq 3 ]; then
              fallback_registry
            fi
          done

      - name: Diagnose install
        if: steps.degraded.outputs.degraded == 'false'
        shell: bash
        run: |
          echo "----- NODE / NPM VERSIONS -----"
          node -v
          npm -v
          echo "----- CURRENT REGISTRY -----"
          npm config get registry
          echo "----- PACKAGE.JSON KEYS -----"
          node -e "const p=require('./package.json'); console.log('has devDeps.vite?', !!(p.devDependencies && p.devDependencies.vite)); console.log(Object.keys(p.dependencies||{}).length+' deps, '+Object.keys(p.devDependencies||{}).length+' devDeps')"
          echo "----- NODE_MODULES CHECK -----"
          if [ ! -d node_modules ] || [ ! \"$(ls -A node_modules 2>/dev/null)\" ]; then
            echo '❌ node_modules está vazio/ausente'
            echo 'Forçando reinstalação com mirror e --force...'
            npm config set registry https://registry.npmmirror.com
            npm cache clean --force || true
            npm i --no-audit --no-fund --include=dev --legacy-peer-deps --force
          else
            echo '✅ node_modules presente'
          fi
          echo "----- TOP LEVEL LIST -----"
          npm ls --depth=0 || true

      - name: Ensure Vite present (retry if missing)
        if: steps.degraded.outputs.degraded == 'false'
        shell: bash
        env:
          NPM_CONFIG_PRODUCTION: "false"
        run: |
          if [ ! -f node_modules/vite/bin/vite.js ]; then
            echo "Vite binary not found. Installing vite as devDependency (retry with force)..."
            for k in 1 2 3; do
              if npm i -D vite@^5 --no-audit --no-fund --include=dev --legacy-peer-deps --force; then
                break
              fi
              echo "vite install attempt $k failed; retrying..."
              npm cache clean --force || true
              sleep $((k*10))
              if [ "$k" -eq 3 ]; then
                echo "Cannot install vite locally; will try npx at build time."
              fi
            done
          fi
          if [ -f node_modules/vite/bin/vite.js ]; then
            echo "✅ vite bin OK"
          else
            echo "⚠️ vite local ausente; build tentará npx como último recurso"
          fi

      - name: Install Playwright
        if: steps.degraded.outputs.degraded == 'false'
        run: npx playwright install --with-deps chromium

      - name: Build
        if: steps.degraded.outputs.degraded == 'false'
        shell: bash
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL || 'dummy-url' }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY || 'dummy-key' }}
        run: |
          if [ -f node_modules/vite/bin/vite.js ]; then
            node node_modules/vite/bin/vite.js build
          else
            echo "⚠️ vite local não encontrado; tentando npx com registry atual..."
            npx --yes vite@^5 build
          fi

      - name: Start preview server
        if: steps.degraded.outputs.degraded == 'false'
        run: npm run preview &

      - name: Wait for server
        if: steps.degraded.outputs.degraded == 'false'
        run: npx wait-on http://localhost:4173 --timeout 60000

      - name: Run E2E smoke tests
        if: steps.degraded.outputs.degraded == 'false'
        run: npx playwright test
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: steps.degraded.outputs.degraded == 'false' && always()
        with:
          name: e2e-results
          path: playwright-report/
          retention-days: 7

      - name: Degraded success marker
        if: steps.degraded.outputs.degraded == 'true'
        run: |
          echo "✅ CI aprovado em modo degradado (sem instalar/buildar por falta de rede)."
          echo "Quando a rede voltar, desative o secret DEGRADED_CI para restaurar o fluxo completo."
